import uuid
from astrbot.api.event import filter, AstrMessageEvent, MessageEventResult
from astrbot.api.star import Context, Star, register
from astrbot.api.message_components import *
from .comfyui_api import ComfyUI
from astrbot.api import llm_tool, logger
from .oss import upload_public_file
import random


# 获取当前文件的绝对路径
current_file_path = os.path.abspath(__file__)
# 获取当前文件所在目录的绝对路径
current_directory = os.path.dirname(current_file_path)
# 图片生成存放目录
img_path = os.path.join(current_directory, 'output', 'temp.png')


@register("astrbot_plugin_comfyui", "guilty", "调用ComfyUI 服务进行文生图", "1.0.0",
          "https://github.com/GUILTYxC/astrbot_plugin_comfyui")
class ComfyUIPlugin(Star):
    def __init__(self, context: Context, config: dict):
        super().__init__(context)
        client_id = str(uuid.uuid4())
        try:
            self.comfy_ui = ComfyUI(config, client_id)
        except Exception:
            logger.error(f"【初始化 ComfyUI Websocket 客户端失败，请注意是否已开启 ComfyUI 服务端】")

    # async def initialize(self):
    #     self.context.activate_llm_tool("comfyui_txt2img")

    # @llm_tool(name="comfyui_txt2img")
    @filter.command("draw",alias={'约稿'})   
    async def comfyui_txt2img(self, event: AstrMessageEvent, prompt: str) -> MessageEventResult:
        '''AI painting based on the prompts entered by the user.

        Args:
            prompt(string): A prompt for text to image,if the user inputs Chinese prompts, they need to be translated into English prompts that are closely aligned with the specialized terms used for AI painting, such as the prompts used when creating AI art with Midjourney.
            img_width(number): The width of the image generated by AI painting. Optional parameter, this does not need to be parsed when there is no specified information about the image width.
            img_height(number): The height of the image generated by AI painting. Optional parameter, this does not need to be parsed when there is no specified information about the image height.
        '''
        user_name = event.get_sender_name()
        CUTE_MESSAGES = [
            "收到啦～{user_name}稍等片刻，少女正在努力画画中...🎨",
            "{user_name}别着急哦～我这就去画给你看！✨",
            "哇呜～收到你的请求啦！马上为你绘制一幅美美的画～🖌️",
            "{user_name}想要什么风格的画呢？让我猜猜...先准备画布啦～📘",
            "哼～又来让我画画，好吧...本小姐勉为其难地接下这个任务！",
            "这种小事不用你提醒啦！我早就准备好画布了！",
            "真是的...每次都找我帮忙，也不说声请，请我喝杯奶茶再继续！",
            "你以为画图很容易吗？给点时间啦，别催了！",
            "虽然很麻烦，不过...看在是你的份上就破例一次好了。",
            "啊啊啊好烦哦！知道了知道了～马上给你画就是了！"
        ]
        safe = event.get_message_str().startswith("约稿")
        prompt = event.get_message_str().replace("draw", "", 1)
        # 同时去除“约稿”，给qq用
        prompt = prompt.replace("约稿", "", 1)
        prompt += ',masterpiece, best quality, highly detailed'
        # 如果是qq渠道,正向提示词增加安全词
        if event.get_message_str().startswith("约稿"):
            prompt = 'General, ' + prompt
        logger.info(f"prompt:{prompt}")
        message = random.choice(CUTE_MESSAGES).format(user_name=user_name)
        yield event.plain_result(message)
    
        if safe:
            img = self.comfy_ui.text_2_img(prompt, None,None,True)
        else:
            img = self.comfy_ui.text_2_img(prompt, None,None,False)
        # 将图片保存到当前output目录下
        with open(img_path, 'wb') as fp:
            fp.write(img)
        logger.info("将图片上传到oss")
        uuid_name = uuid.uuid4().hex
        upload_public_file(file_path=img_path,
            bucket_name="image",
            object_name="ai/" + uuid_name + ".png",
            endpoint_url="http://123.56.117.196:9000",  # 用你的服务器 IP 替换
            access_key="admin",
            secret_key="admin123456")
        file_url = "http://123.56.117.196:9000/image/ai/" + uuid_name + ".png"
        chain = [
            # Image.fromURL(file_url)
            Image.fromFileSystem(img_path)
        ]
        logger.info(f"将图片{file_url}发送给用户...")
        yield event.chain_result(chain)
        logger.info(f"图片{file_url}发送成功！")
